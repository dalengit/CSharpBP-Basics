MODULE 2 - Defining Proper Classes
1 - Application Architecture 

The application tracks the products Acme buys from approved vendors. 
- In the solution there are projects - "Acme.Biz" etc, a project defines a component of the app 
- Each project is compiled into an executable, otherwise known as DLL. 
- First step in creating a C# app is defining the components and then creating a project for each component - easy to maintain/navigate codebase. 

UI Layer 
- Windows forms - Acme.Win
- WPF - Acme.Wpf
- Web Sales - Acme.Web 

Business Logic Layer
- Acme.Biz - here we put the business logic for our application 
- We should put business logic into it's own component so it can be extendable: open/closed principle/SRP

Data Access Layer 
- Acme.Data 
- The data access component provides all communication with DB 
- Also implemented through class libraries and Entity Framework (EF)

Common Layer 
- Acme.Common - common components for our code 
- Implemented through class libraries 

2 - C# Application "Things"

C# Apps work with things: 
- Web pages 
- Runtime memory
- Domain entities
- Logging 
- Working with the DB 
- How does an application know what to do with all these things? - this is described in a class.

What is a class?
- A class is a user-defined blueprint or prototype from which objects are created. Basically, a class combines the fields and methods
(member function which defines actions) into a single unit. In C#, classes support polymorphism, inheritance and also provide 
the concept of derived classes and base classes.
- A class contains objects which defines what the class looks like and the behaviour it will inherit. 

3 - Types of Classes

Classes: 
- UI 
- Domain Entity 
- Library 

UI
- View model classes - MVVM pattern 
- Form classes

Domain Entity 
- Domain classes (Acme.Biz) - identifies the basic business entities that need to be managed by the app and how they are related. 
- Repository classes - Tracking the data of classes

Common code 
- Can determine specific functionality of one component by seeing if it goes into the other components 
- If functionality is common across components, then it may be better in a library component 


4 - Unit Testing -> VendorTests.cs

- Tests the behaviour of code: often a method 
- Automated testing 
- Defined with code 
- Identifies errors 

To create good test, we must: 

- Have testable methods - create tests which explore all cases/situation
- I.e. test cases clarify scenarios
- Tests must point out any failures

5 - FAQs

Why is a layered architecture important?
- Logical componentes are easier to create, change, extend, and maintain 
- Code is easier to reuse 

What is a class?
- A template for the objects created at runtime 
- Specifies the data and operations for each entity 

What are the benefits of unit testing?
- Higher quality code, faster and easier debusgging, and they are repeatable over the life of the application.

MODULE 3 - Building Good Classes -> Product.cs

The code we write for a class, includes these members: 
- The class signature/name/access modifier 
- Fields
- Properties
- Methods 
- Constructors 

In this module we will: 
- Build a class
- Define constructors
- Look at namespaces
- Building a static class 
- Defining a singleton 
- FAQ 

1 - Class Signature 
- Access modifier: public, private, internal 
- Fields define the variables in the class - hold data that the methods create - also have access modifiers 
- Properties are getter and setter function that control access to the fields of the class (Backing fields)
- Methods are just functions containing the logic for the class

2 - Class best practices 
DO: 
- Define a meaningful name
- Use a noun 
- Use PascalCasing 

- Ensure that the class has a well-defined purpose
- Create one class per code file
- Add properties above the methods 

DON'T: 
- Use abbreviations 
- Use prefixes 
- Use underscores 

- Avoid large classes

3 - Constructors 
- Is a special method in the class
- Executed when instance is created 
- Named with the same as the class name 
- Default constructor has no parameters 
- Ctors not required

Parameterized constructor
- Defines parameters to initialize the object instance 
- Overloading - defining two methods with the same name (but diff. parameters)
- Minimizes repeated code
- A parameterized constructor will use "this" keyword to invoke another constructor, therefore triggering the methods inside that ctor,
This process is called constructor chaining e.g. 

public class Product 
{
	public Product() {}

	public Product(string productName) : this() // This refers to original ctor
	{
		ProductName = productName;
	}
}

4 - Constructor Best Practice
DO: 
- Consider proviidng a default constructor 
- Consider providing a parameterized constructor - this initializes the minimum properties required for a valid object 
- Name the constructor parameters the same name as the related properties.
 
DON'T: 
- Performing too much work in the constructor

5 - Namespaces 
- Namespaces are automatically added arond every class
- They are the same name as the project 
- They are used to provide a unique address to the class and to organize the applications classes into a logical hierarchy 

Namespaces - Best Practices
DO: 
- Follow this generalized template <CompanyName>.<Technology>.<Feature> e.g.
Microsoft.Office.Interop.Powerpoint
- Use PascalCasing 

AVOID: 
- Using System in your namespace e.g.
System.Windows.Media.Imaging 
- Using a class name 
Namespace: Acme.Biz.Product
Class: Acme.Biz.Product.Product

6 - Static Classes 

A static class is a cohesive set of services provided by a set of methods, often without any internal data 
- There are three key differences to a static class
- The static keyword is in the class signature e.g. public static class Meme {}
- The class can only include static members - fields, properties, and methods must also be static 
- You cannot instantiate a static class i.e. new up/create an instance
- Use the class name to call members of a static class
- A static class acts like a container for properties and methods, mostly methods that provide utility features. 
 
 Static Classes Best Practices
 DO: 
 - Use static classes sparingly, they should only be used as supporting classes for the application 
 - Static classes don't participate well with OOP features 
 - Use for common code library components when needed 

 AVOID: 
 - Using static classes as a misc. bucket - every class should have a purpose 